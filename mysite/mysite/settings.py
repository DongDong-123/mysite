"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import logging
import django.utils.log
import logging.handlers
import redis
import json
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'f%1v@a6b4t#3n5&-m5*5qf2w)kihlma2h&fnj6y%ikc4te4=g4'

# SECURITY WARNING: don't run with debug turned on in production!
# 为FALSE时，本地调试可能会无法加载静态文件
DEBUG =True

ALLOWED_HOSTS = ["127.0.0.1", '*.*.*.*','api.dondongweb.club']

# Application definition
# 读取配置文件
json_file = open(os.path.join(os.getcwd(), "setting.json"), "r", encoding="utf-8")
contant = json.load(json_file)

# REDIS数据库配置
REDIS_PWD = contant["REDIS"]["redis_passwd"]
REDIS_PORT = contant["REDIS"]["PORT"]
REDIS_DATABASE = contant["REDIS"]["DATABASE"]

# MYSQL数据库配置
MYSQL_USER = contant["MYSQL"]["mysql_user"]
MYSQL_PASSWD = contant["MYSQL"]["mysql_passwd"]
MYSQL_PORT = contant["MYSQL"]["PORT"]
MYSQL_DATABASE = contant["MYSQL"]["DATABASE"]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'polls',
    'myadmin',
    #'news',
    #'shop',
    'ueditor',
    'blog',
    'comments',
    'usersystem',
    #'wxkf',
    #'visiter',
    'apilimiter',
    #'django_hosts'
    'Empire'
]

ROOT_URLCONF = 'mysite.urls'
#ROOT_HOSTCONF = 'mysite.hosts'
#DEFAULT_HOST = 'blog'
FILE_UPLOAD_PERMISSIONS = 0o664
MIDDLEWARE = [
#    'django_hosts.middleware.HostsRequestMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 'middleware.StatFlowMiddleware.RequestBlockingMiddleware',
    'middleware.StatFlowMiddleware.StatFlowMiddleware',
    'middleware.StatFlowMiddleware.FilterUserAgentMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.AdminLoginMiddleware.AdminLoginMiddleware',
#    'django_hosts.middleware.HostsResponseMiddleware',

]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'blog_tags': 'blog.templatetags.blog_tags',
            }
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': MYSQL_DATABASE,
        'USER': MYSQL_USER,
        'PASSWORD': MYSQL_PASSWD,
        'HOST': 'localhost',
        'PORT': MYSQL_PORT,
    }
}
POOL = redis.ConnectionPool(host='127.0.0.1', password=REDIS_PWD, port=REDIS_PORT, db=REDIS_DATABASE)
# 创建日志文件夹路径
LOG_PATH = os.path.join(BASE_DIR, 'logs')
# 如过地址不存在，则自动创建log文件夹
if not os.path.isdir(LOG_PATH):
    os.mkdir(LOG_PATH)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'}
        # 日志格式
    },
    'filters': {
    },
    'handlers': {
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'include_html': True,
        # },
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/all.log',  # 日志输出文件
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份份数
            'formatter': 'standard',  # 使用哪种formatters日志格式
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/error.log',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/script.log',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
        },
        # 'scprits_handler': {
        #     'level': 'DEBUG',
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': 'logs/script.log',
        #     'maxBytes': 1024 * 1024 * 5,
        #     'backupCount': 5,
        #     'formatter': 'standard',
        # }
    },
    'loggers': {
        'django': {
            'handlers': ['default', 'console'],
            'level': 'DEBUG',
            'propagate': False
        },
        'django.request': {
            # 'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # 'scripts': {
        #     'handlers': ['scprits_handler'],
        #     'level': 'INFO',
        #     'propagate': False
        # },
        # 'sourceDns.webdns.views': {
        #     'handlers': ['default', 'error'],
        #     'level': 'DEBUG',
        #     'propagate': True
        # },
        # 'sourceDns.webdns.util': {
        #     'handlers': ['error'],
        #     'level': 'ERROR',
        #     'propagate': True
        # }
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 邮件部分
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = False  # 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)
EMAIL_USE_SSL = True  # 是否使用SSL加密，qq企业邮箱要求使用
EMAIL_HOST = 'smtp.qq.com'  # 发送邮件的邮箱 的 SMTP服务器，这里用了163邮箱
EMAIL_PORT = 465  # 发件箱的SMTP服务器端口
# EMAIL_HOST_USER = 'zisehaiyang04@163.com'  # 发送邮件的邮箱地址
EMAIL_HOST_USER = '305329031@qq.com'  # 发送邮件的邮箱地址
EMAIL_HOST_PASSWORD = 'yakafpynhyaccbbi'  # 发送邮件的邮箱密码(这里使用的是授权码)
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
